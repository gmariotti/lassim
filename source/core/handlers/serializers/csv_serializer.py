import logging
import os
from typing import List, Callable

from sortedcontainers import SortedList

__author__ = "Guido Pio Mariotti"
__copyright__ = "Copyright (C) 2016 Guido Pio Mariotti"
__license__ = "GNU General Public License v3.0"
__version__ = "0.2.0"


class CSVSerializer:
    """
    This class represents a serializer of solutions in a csv formatted file.
    """

    def __init__(self, directory: str, n_print: int, headers: List[str],
                 filename_creator: Callable[[int, int], str]):
        self._directory = directory
        self._num = n_print
        self._headers = headers
        self._filename_creator = filename_creator
        self._separator = "\t"

    @classmethod
    def new_instance(cls, output_dir: str, n_print: int, headers: List[str],
                     filename_creator: Callable[[int, int], str]
                     ) -> 'CSVSerializer':
        """
        Creates a new instance of a CSVSerializer.
        :param output_dir: Name of the directory where to put the serialized
        solutions. It's created if it doesn't exist.
        :param n_print: Number of solutions to print for each serialization.
        :param headers: Name of the headers to use for the data serialized.
        :param filename_creator: Function for creating the name of the output
        file.
        :return: An instance of CSVSerializer.
        """

        if not os.path.isdir(output_dir):
            os.makedirs(output_dir)
        if len(headers) == 0:
            raise RuntimeError(
                "List of headers for solutions serialization is empty."
            )
        return CSVSerializer(
            output_dir, n_print, headers, filename_creator
        )

    def serialize_solutions(self, solutions: SortedList, filename: str = None):
        """
        Serialize a list of solutions as a single csv file. The matrix to use
        is the one returned from an instance of BaseSolution, while the last
        row is the Cost with its value. Use filename in case you want a
        different name for the file in respect to the one generated by the
        filename_creator passed as an argument at creation time.
        :param solutions: List of BaseSolution objects
        :param filename: Optional filename.
        """

        if filename is None:
            filename = self._filename_creator(
                self._num, solutions[0].number_of_variables
            )
        num_solutions_to_print = min(len(solutions), self._num)
        with open(self._directory + "/" + filename, "w") as output:
            for i in range(0, num_solutions_to_print):
                solution = solutions[i]
                s_matrix = solution.get_solution_matrix(headers=self._headers)
                output.write(s_matrix.to_csv(sep=self._separator, index=False))
                output.write("Cost{}{}\n".format(
                    self._separator, solution.cost
                ))
        logging.getLogger(__name__).info(
            "Created file {} in directory {}".format(filename, self._directory)
        )
